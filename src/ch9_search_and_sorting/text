Search

1. Linear Search
- 반복문을 이용한 개별 search.
- Time Complexity: O(n).
- Non-sorted 에 적용 가능.

2. Binary Search
- Divide and conquer 을 이용한 분할 search.
- Middle value 를 기준으로, Narrow Interval.
- Time Complexity: O(log n).
- Space Complexity: O(1) if iterative O(log n) if recursive.
- Sorted 에만 적용 가능.

Sorting

1. Selection Sort
- Array 의 좌측에서부터 시작.
- Min 을 찾은 뒤(Selection Sort), 좌측 적절한 위치에 넣기.
- Time Complexity: O(n^2)
- In-place sort

2. Insertion Sort
- 좌측에서부터 하나씩 잡고, 좌측 Sorted array 에 삽입(Insertion).
- 이때, 삽입하면서 적절한 위치 파악.(Sorted Array 의 오른쪽 -> 왼쪽)
- Time Complexity: O(n^2)
- In-place sort
- Stable(Same value, Remain Order)

3. Merge Sort
- Divide and Conquer 방식.
- 모두 1개가 될 때까지(Base case: n=1) 나눈 뒤(Recursive mergeSort) 합치면서 Sort(merge).
- Time Complexity: O(nlog n)
- Not in-place sort
- Stable

4. Quick Sort
- Divide and Conquer
- Right-most Pivot 을 뽑고, pivot 기준으로 small/large 구분.
- 구분이 끝나면 left/right sub-array 로 분할해 다시 pivot 뽑기.
- Time Complexity: O(nlog n) if best, O(n^2) if worst, O(nlog n) if average.
- In-place sort
- 이미 Sorted 된 경우 worst case 이기에, pivot 을 다르게 뽑을 필요성 有.

5. Counting Sort
- non-negative integer + 중복된 값들이 다수 존재할 때 사용.
- Step
    - (1). 최댓값만큼의 길이를 가지는 Array C 생성.
    - (2). C[i] = i 가 나타내는 횟수.
    - (3). Array C를 누적합으로 다시 표현.
    - (4). 새로운 Array B를 만들고, Array A의 뒤에서부터(Stable) 하나씩 C[A[I]] 값 검사.
    - (5). B[C[A[i]]] = A[i]로 할당. 한 번 할당할 때마다 C[A[i]]의 값 감소.
- Time Complexity: O(n+k), (k is Maximum value)

6. Radix Sort
- 마지막 자리부터 최고 자릿수까지 순차적으로 Stable Sort 시행.
- 이때 Stable Sort 로 Counting Sort 가 효율적.
- Time Complexity: O(n * d) = O(n) (d is digit)

7. Randomized Select(Search)
- Randomized Partition을 이용한 i-th element Searching.
- Expected running time: O(n)
- Works on only one side of the partition.
